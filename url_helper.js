// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  define(['tag_helper'], function(TagHelper) {
    var PolymorphicRoutes, UrlHelper, url_helper;
    PolymorphicRoutes = (function() {
      function PolymorphicRoutes() {
        this.extract_record = __bind(this.extract_record, this);
        this.build_named_route_call = __bind(this.build_named_route_call, this);
        this.routing_type = __bind(this.routing_type, this);
        this.action_prefix = __bind(this.action_prefix, this);
        this.polymorphic_url = __bind(this.polymorphic_url, this);
      }

      PolymorphicRoutes.prototype.polymorphic_url = function(record_or_hash_or_array, options) {
        var args, inflection, named_route, record, url_options;
        if (options == null) {
          options = {};
        }
        if (record_or_hash_or_array instanceof Array) {
          record_or_hash_or_array = record_or_hash_or_array.compact();
        }
        if (record_or_hash_or_array.length === 1) {
          record_or_hash_or_array = record_or_hash_or_array[0];
        }
        record = this.extract_record(record_or_hash_or_array);
        args = record_or_hash_or_array instanceof Array ? Object.clone(record_or_hash_or_array) : [record_or_hash_or_array];
        inflection = options.action && String(options.action) === "new" ? (args.pop(), 'singular') : !record.id ? (args.pop(), 'plural') : record instanceof Backbone.Model ? (args.pop(), 'plural') : 'singular';
        Object.delete_if(args, function(arg) {
          return arg instanceof String || typeof arg === 'string';
        });
        named_route = this.build_named_route_call(record_or_hash_or_array, inflection, options);
        url_options = Object.except(options, 'action', 'routing_type');
        if (Object.keys(url_options).length !== 0) {
          if (Object.isPlainObject(args.last())) {
            return args.last().update(url_options);
          } else {
            args.push(url_options);
            return args;
          }
        }
      };

      PolymorphicRoutes.prototype.action_prefix = function(options) {
        if (options.action != null) {
          return "" + options.action + "_";
        } else {
          return '';
        }
      };

      PolymorphicRoutes.prototype.routing_type = function(options) {
        return options.routing_type || 'url';
      };

      PolymorphicRoutes.prototype.build_named_route_call = function(records, inflection, options) {
        var record, route;
        if (options == null) {
          options = {};
        }
        if (records instanceof Array) {
          record = records.pop();
          route = records.map((function(_this) {
            return function(parent) {
              if (parent instanceof String || typeof parent === 'string') {
                return parent;
              } else {
                return Naming.singular_route_key(parent);
              }
            };
          })(this));
        } else {
          record = this.extract_record(records);
          route = [];
        }
        if (record instanceof String || typeof record === 'string') {
          route.push(record);
        } else if (record) {
          if (inflection === 'singular') {
            route.push(Naming.singular_route_key(record));
          } else {
            route.push(Naming.route_key(record));
          }
        } else {
          throw new ArgumentError("Nil location provided. Can't build URI.");
        }
        route.push(this.routing_type(options));
        return this.action_prefix(options) + route.join("_");
      };

      PolymorphicRoutes.prototype.extract_record = function(record_or_hash_or_array) {
        if (record_or_hash_or_array instanceof Array) {
          return record_or_hash_or_array.last();
        } else if (Object.isPlainObject(record_or_hash_or_array)) {
          return record_or_hash_or_array.id;
        } else {
          return record_or_hash_or_array;
        }
      };

      return PolymorphicRoutes;

    })();
    UrlHelper = (function() {
      function UrlHelper() {}

      UrlHelper.prototype.url_for = function(options) {
        if (typeof options === 'string') {
          return options;
        } else if (options.url && typeof options.url === 'function') {
          return options.url();
        }
      };

      UrlHelper.prototype.link_to = function() {
        var args, href, href_attr, html_options, name, options, tag_options, url;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        name = args[0];
        options = args[1] || {};
        html_options = args[2] || {};
        url = this.url_for(options);
        href = html_options['href'];
        tag_options = TagHelper.tag_options(html_options) || '';
        if (!href) {
          href_attr = "href=\"" + (TagHelper.html_escape(url)) + "\"";
        }
        return "<a " + href_attr + tag_options + ">" + (TagHelper.html_escape(name || url)) + "</a>";
      };

      return UrlHelper;

    })();
    url_helper = new UrlHelper();
    return {
      link_to: url_helper.link_to,
      url_for: url_helper.url_for
    };
  });

}).call(this);
